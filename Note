## Стандартные типы (неизменяемые):
'''
Числовые
	целые числа int
	вещественные (с плавающей точкой) float
	логические bool
Стороковые
	Строчки str
'''

Преобразоваие типов:
int(x) – преобразование к целому числу
float(x) – преобразование к числу с плавающей точкой float(‘int’) – бесконечность
str(x) – преобразование в текст


Тип объекта
Определяет множество значений, которые может принимать объект
Определяет операции, которые могут применяться к объекту
type(x)


Переменные
a = 1
a – переменная
= – оператор присваивания
1 – значение

Присваивание:
a, b = 1, 2


Оператор приращения
a = 1
a += 2 => 3
+= 
-=
*=
/= деление
//= целочисленное деление
%= взятие остатка
**=

При делении отрицательных чисел необходимо помнить, что результат целочисленного деления не превосходит частное. Другими словами, округление берётся в меньшую сторону (число -4 меньше, чем число -3). 


Ввод и вывод
print( )
Функция print() принимает несколько аргументов, выводит их через пробел, после чего ставит перевод строки. Это поведение можно изменить, используя именованные параметры sep (разделитель) и end (окончание).

input( )
a,b = map(int,input().split()) - если необходимо ввести два целых числа в одну строку через пробел
a,b,c = map(float,input().split()) - если необходимо ввести три вещественных числа в одну строку через пробел

Логические значения
false(0) False
true(1) True

Операции
x or y
x and y
not x 

Операции сравнения
< строго меньше
<= меньше или равно
> строго больше
>= больше или равно
== равно
!= не равно


Условия
Отступ 4 пробела
if …:
	print( )
elif …: (проверка еще условия)
else:
	print( )


Строки
Если надо перенести строку, то надо использовать 
‘’’ …. …. ……..
… ……….. ..’’’

Строки можно умножать 
‘abc’ * 3 => ‘abcabcabc’

len ( ) – считает символы в строке
Строки можно сравнивать. Все заглавные буквы в кодировке идут раньше, а значит будут меньше
length = len(str(i)
x = ‘greeting’
x[0] = g и тд. Счет с начала начинается с нуля, счет с конца начинается с -1
Строки неизменяемые, в них нельзя изменить один символ
‘\n’ – перенос строки

deal = success
for x n range deal
s.count(p) – сколько раз в строке s встречается значение p
Функции работают только с буквами


Функции
s.upper( ) – делает все буквы большими ! 
s.lower( ) – делает все буквы маленькими !
s.count(p) – сколько раз p встречается в s
s.find(p) – первое вхождение (номер первого индекса) в 
s.find(A) – входит ли строка А в s (-1  или 1)
s.replace(‘c’, ‘C’) – заменяем все вхождения ‘c’ на ‘C’ !
Метод capitalize() возвращает копию строки s, в которой первый символ имеет верхний регистр, а все остальные символы имеют нижний регистр.
Метод swapcase() возвращает копию строки s, в которой все символы, имеющие верхний регистр, преобразуются в символы нижнего регистра и наоборот
Метод title() возвращает копию строки s, в которой первый символ каждого слова переводится в верхний регистр.
Метод startswith(<suffix>, <start>, <end>) определяет начинается ли исходная строка s подстрокой <suffix>. Если исходная строка начинается с подстроки <suffix>,метод возвращает значение True, а если нет, то  False.
Метод endswith(<suffix>, <start>, <end>) определяет оканчивается ли исходная строка s подстрокой <suffix>. Метод возвращает значение True если исходная строка оканчивается на подстроку <suffix> и False в противном случае.

! После вызова строки первоначальная строка не изменится
s[1:4] – взятие диапазона от 1 до 3. Операции такие же как с индексом
s[::-1] – открытый диапазон и взятие символов в обратном порядке 
! Запятых нигде нет, только двоеточия. Правая граница ВСЕГДА не включается в интервал
Вывести текст без добавления новой строки можно с помощью параметра end ="<character>" , где <character> — это символ, который дальше будет использоваться для разделения строк.


Создание собственной функции
# Определение функции
# Определение не вызывает и не выполняет функцию
# Мы лишь говорим, что теперь такая функция существует
def show_greeting():
  # Внутри тела отступ четыре пробела
  text = 'Hello, Hexlet!'
  print(text)

# Вызов функции
show_greeting()  # => 'Hello, Hexlet!'

Циклы
While условие:
	действия
	в цикле
break – досрочно завершает цикл
Например:
if ….:
	break
continue – пропуск следующих операций и переход к while 

for i in … — цикл для Х делать что-то 
range (7) — последовательность от х=1 (например) до х=7, не включая 7

range(start=o, to, step=1)
range(5) — 0, 1, 2, 3, 4; с шагом 1
range(2, 5) — 2, 3, 4; с шагом 1
range (2, 15, 4) — 2, 6, 10, 14; с шагом 4


Список
list = [‘x’,  ‘y’,  ‘z’]
Длина списка считается по элементам, а не символам
Списки можно складывать
Списки в отличии от другого типа данных изменяемые

Добавить элемент list.append(‘u’) или += или сразу несколько элементов
Добавить на конкретную позицию в списке list.insert(1, ‘u’) 

ЕСЛИ ДОБАВЛЯТЬ БЕЗ КВАДРАТНЫХ СКОБОК, БУДЕТ ДОБАВЛЕН КАЖДЫЙ СИМВОЛ

Убрать элемент
list.remove(‘u’)
del list[1]

Сортировка
sorted() – не изменяя список
x.sort() – меняется сам список
reversed() – не изменяя список
x.reverse() – меняется сам список

Генерация двумерных списков
a = [[0 for i in range (n)] for j in range (n)] 
